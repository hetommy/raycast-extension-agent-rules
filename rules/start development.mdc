---
description: Raycast Extension Development Best Practices
alwaysApply: false
---

# Raycast Extension Development

## Project Structure

Raycast extensions follow a specific structure:

```
extension-name/
├── package.json          # Extension metadata and dependencies
├── src/
│   ├── index.tsx         # Main entry point
│   ├── components/       # React components
│   ├── lib/             # Utility functions
│   └── types/           # TypeScript type definitions
├── assets/              # Icons and other assets
├── .eslintrc.js         # ESLint configuration
├── tsconfig.json        # TypeScript configuration
└── README.md           # Extension documentation
```

## Starting Development on an Extension

When a user says "@start development.mdc on {extension-name}", the assistant should:

### **Assistant Workflow**

1. **Search for Extension**
   - Use `glob_file_search` to find the extension directory
   - Look for patterns like `**/{extension-name}/package.json`
   - If not confident about the extension location, ask the user to confirm

2. **Verify Extension Found**
   - Confirm the extension directory exists
   - Check that it has a valid `package.json` with Raycast extension metadata
   - If multiple matches found, ask user to clarify which one

3. **Follow Development Setup**
   - Navigate to the specific extension directory
   - Install dependencies
   - Start development server
   - Verify extension is running

### **User Workflow**

When starting development on a specific extension, follow this workflow:

### 1. **Locate Extension Directory**
```bash
# Navigate to the specific extension directory
cd "extensions/extensions/{extension-name}"
```

### 2. **Verify Extension Structure**
- Confirm `package.json` exists in the extension directory
- Check that the extension has the expected Raycast extension structure

### 3. **Install Dependencies**
```bash
# Install dependencies in the extension directory
npm install
```

### 4. **Start Development Server**
```bash
# Start Raycast development mode (preferred)
ray develop

# OR use npm script if available
npm run dev
```

### 5. **Verify Extension is Running**
- Check Raycast for the extension commands
- Test basic functionality
- Verify hot reload is working

## Essential Commands

```bash
# Install dependencies (run in extension directory)
npm install

# Start development mode (run in extension directory)
ray develop
# OR
npm run dev

# Build for production
npm run build

# Lint code
npm run lint

# Fix linting issues
npm run fix-lint

# Type check
npm run type-check

# Publish extension
npm run publish
```

## Key Development Principles

### 1. **TypeScript First**
- Always use TypeScript for new extensions
- Define proper types for all props and state
- Use strict TypeScript configuration

### 2. **React Best Practices**
- Use functional components with hooks
- Implement proper error boundaries
- Follow Raycast's design patterns

### 3. **Performance Considerations**
- Lazy load components when possible
- Optimize bundle size
- Use proper memoization

### 4. **Error Handling**
- Implement comprehensive error handling
- Provide user-friendly error messages
- Log errors appropriately

## Common Patterns

### Action Component
```tsx
import { ActionPanel, Action, List } from "@raycast/api";

export default function Command() {
  return (
    <List>
      <List.Item
        title="Example Item"
        actions={
          <ActionPanel>
            <Action.OpenInBrowser url="https://example.com" />
            <Action.CopyToClipboard content="example" />
          </ActionPanel>
        }
      />
    </List>
  );
}
```

### Form Component
```tsx
import { Form, ActionPanel, Action } from "@raycast/api";

export default function Command() {
  return (
    <Form
      actions={
        <ActionPanel>
          <Action.SubmitForm title="Submit" onSubmit={handleSubmit} />
        </ActionPanel>
      }
    >
      <Form.TextField id="name" title="Name" placeholder="Enter name" />
      <Form.TextArea id="description" title="Description" />
    </Form>
  );
}
```

## API Usage

### Preferences
```tsx
import { getPreferenceValues } from "@raycast/api";

interface Preferences {
  apiKey: string;
  baseUrl: string;
}

const preferences = getPreferenceValues<Preferences>();
```

### Local Storage
```tsx
import { LocalStorage } from "@raycast/api";

// Store data
await LocalStorage.setItem("key", "value");

// Retrieve data
const value = await LocalStorage.getItem("key");
```

### Clipboard
```tsx
import { Clipboard } from "@raycast/api";

// Copy to clipboard
await Clipboard.copy("text to copy");

// Paste from clipboard
const text = await Clipboard.paste();
```

## Testing Guidelines

1. **Test all user flows** - Ensure every action works as expected
2. **Test error scenarios** - Handle network failures, invalid inputs
3. **Test performance** - Ensure extensions load quickly
4. **Test accessibility** - Follow accessibility guidelines

## Publishing Checklist

Before publishing an extension:

- [ ] All TypeScript errors resolved
- [ ] ESLint passes without errors
- [ ] Extension builds successfully
- [ ] All functionality tested
- [ ] README updated with usage instructions
- [ ] Icons and assets properly sized
- [ ] Preferences configured correctly
- [ ] Error handling implemented
- [ ] Performance optimized

## Troubleshooting

### Development Setup Issues

1. **"Could not read package.json" Error**
   - **Cause**: Running commands from wrong directory (project root instead of extension directory)
   - **Solution**: Always `cd` into the specific extension directory first
   - **Example**: `cd "extensions/extensions/extension-name" && npm install`

2. **Extension Not Found**
   - **Cause**: Extension name doesn't match directory name
   - **Solution**: Use `glob_file_search` to locate the extension
   - **Ask user**: "I found multiple extensions. Did you mean [extension-name]?"

3. **Development Server Not Starting**
   - **Cause**: Missing dependencies or incorrect directory
   - **Solution**: Run `npm install` in extension directory, then `ray develop`

### Common Issues

1. **Extension not loading**: Check `package.json` and entry point
2. **TypeScript errors**: Verify `tsconfig.json` configuration
3. **Build failures**: Check for missing dependencies
4. **Runtime errors**: Review error boundaries and error handling

### Debug Tips

- Use `console.log` for debugging (visible in Raycast's developer tools)
- Check Raycast's developer console for errors
- Test with different input scenarios
- Verify API endpoints are accessible
- Always run commands from the extension directory, not the project root

